1. rvm install
gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
curl -sSL https://get.rvm.io | bash -s stable
source ~/.bashrc
source ~/.bash_profile
sed -i -e 's/ftp\.ruby-lang\.org\/pub\/ruby/ruby\.taobao\.org\/mirrors\/ruby/g' ~/.rvm/config/db

2. rvm use
rvm list known
rvm install 2.1.4
rvm use 2.1.4
rvm use 2.1.4 --default
rvm list
rvm remove 2.1.4

3. auto load gemset
rvm install 2.1.4
rvm use 2.1.4
rvm gemset create rails4
rvm use 2.1.4@rails4

into program
echo rvm use 2.1.4@rails4 > .rvmrc

4.
gem sources --remove https://rubygems.org/
gem sources -a https://ruby.taobao.org/
gem sources -l

gem install rails -V
gem install ruby-mysql -V


5.
svn co https://svn.redmine.org/redmine/branches/3.0-stable redmine-3.0
ln -s redmine-3.0 redmine
cd redmine
sudo apt-get install libmagick++-dev libmysqlclient-dev imagemagick
bundle install

6.
cd redmine/config
cp database.yml.example database.yml
cat > database.yml <<EOF
production:   adapter: mysql  
database:redmine  
host: localhost  
username: redmineuser  
password: redminepw  
encoding: utf8
EOF

rake generate_secret_token 
rake initializers/session_store.rb
rake db:migrate RAILS_ENV="production"
rake redmine:load_default_data RAILS_ENV="production"
ruby bin/rails server webrick -e production -d

7. nginx + unicorn
nano /etc/apt/sources.list
deb http://nginx.org/packages/ubuntu/ precise nginx
deb-src http://nginx.org/packages/ubuntu/ precise nginx
sudo apt-get update
sudo apt-get install nginx

cat /etc/nginx/conf.d/default.conf <<EOF
upstream redmine {
  server 127.0.0.1:8080;
}

server {
    listen       80;
    server_name  localhost;

    #charset koi8-r;
    #access_log  /var/log/nginx/log/host.access.log  main;

        try_files $uri/index.html $uri @redmine;
    location / {
        proxy_pass http://redmine;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;
#        root   /usr/share/nginx/html;
#        index  index.html index.htm;
    }

    #error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    #
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # proxy the PHP scripts to Apache listening on 127.0.0.1:80
    #
    #location ~ \.php$ {
    #    proxy_pass   http://127.0.0.1;
    #}

    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
    #
    #location ~ \.php$ {
    #    root           html;
    #    fastcgi_pass   127.0.0.1:9000;
    #    fastcgi_index  index.php;
    #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
    #    include        fastcgi_params;
    #}

    # deny access to .htaccess files, if Apache's document root
    # concurs with nginx's one
    #
    #location ~ /\.ht {
    #    deny  all;
    #}
}
EOF



gem install unicorn
curl -o config/unicorn.rb https://raw.github.com/defunkt/unicorn/master/examples/unicorn.conf.rb
unicorn_rails -c config/unicorn.rb -E production -D

8. global settings
rvm wrapper ruby-2.1.4@rails4 online unicorn_rails

cat > /etc/init.d/unicorn <<EOF
#!/bin/sh
set -e
# Feel free to change any of the following variables for your app:
TIMEOUT=${TIMEOUT-60}
UNICORN=/home/oslet/.rvm/bin/online_unicorn_rails
APP_ROOT=/home/oslet/redmine
APP_USER=oslet
PID=$APP_ROOT/unicorn/app/shared/pids/unicorn.pid
ENV=production
CMD="$UNICORN -E $ENV -D -c $APP_ROOT/config/unicorn.rb"
action="$1"
set -u

old_pid="$PID.oldbin"
cd $APP_ROOT || exit 1

sig (){
        test -s "$PID" && kill -$1 `cat $PID`
}

oldsig (){
        test -s $old_pid && kill -$1 `cat $old_pid`
}
case $action in
start)
        sig 0 && echo >&2 "Already running" && exit 0
        su $APP_USER -c "$CMD"
        ;;
stop)
        sig QUIT && exit 0
        echo >&2 "Not running"
        ;;
force-stop)
        sig TERM && exit 0

        echo >&2 "Not running"
        ;;
restart|reload)
        sig HUP && echo reloaded OK && exit 0
        echo >&2 "Couldn't reload, starting '$CMD' instead"
        su $APP_USER -c "$CMD"
        ;;
upgrade)
        if sig USR2 && sleep2 && sig 0 && oldsig QUIT
        then
                n=$TIMEOUT
                while test -s $old_pid && test $n -ge 0
                do
                        printf '.' && sleep 1 && n=$(($n - 1))
                done
                echo

                if test $n -lt 0 && test -s $old_pid
                then
                        echo >&2 "$old_pid still exists after $TIMEOUT seconds"
                        exit1
                fi
                exit0
        fi
        echo >&2 "Couldn't upgrade, starting '$CMD' instead"
        su $APP_USER -c "$CMD"
        ;;
reopen-logs)
        sig USR1
        ;;*)
        echo >&2 "Usage: $0 <start|stop|restart|upgrade|force-stop|reopen-logs>"
        exit 1
        ;;
esac
EOF

chmod +x /etc/init.d/unicorn

/etc/init.d/unicorn start
